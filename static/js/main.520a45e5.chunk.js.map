{"version":3,"sources":["Timer.js","ControlButton.js","App.js","index.js"],"names":["Timer","props","state","start","Date","time","duration","bind","stop","reset","clearInterval","this","timer","setState","setInterval","now","getTime","currentTimer","millis","Math","floor","seconds","minutes","display","toString","padStart","className","React","Component","ControlButton","options","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","height","width","isStopped","isPaused","isClickToPauseDisabled","onClick","label","App","createRef","toggle","restart","isRunning","current","ref","spinningAnimationData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA0EeA,E,kDAtEX,WAAYC,GAAQ,IAAD,8BAGf,cAAMA,IAKDC,MAAQ,CACTC,MAAO,IAAIC,KACXC,KAAO,EACPC,SAAW,GAIf,EAAKH,MAAQ,EAAKA,MAAMI,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBAjBE,E,mEAwBfG,cAAcC,KAAKC,S,8BAKtB,IAAD,OACID,KAAKE,SAAS,CAAEV,MAAO,IAAIC,OAC3BO,KAAKC,MAAQE,aAAY,WAErB,EAAKD,SAAS,CACVR,KAAM,IAAID,SAEf,M,6BAOHM,cAAcC,KAAKC,OACnBD,KAAKE,SAAS,CACVP,SAAWK,KAAKT,MAAMI,SAAWF,KAAKW,MAAQJ,KAAKT,MAAMC,MAAMa,UAC/Db,MAAO,IAAIC,S,8BAMfO,KAAKE,SAAS,CACVV,MAAO,IAAIC,KACXE,SAAU,M,+BAOd,IAAMW,EAAeb,KAAKW,MAAQJ,KAAKT,MAAMC,MAAMa,UAAYL,KAAKT,MAAMI,SACpEY,EAASC,KAAKC,MAAMH,EAAc,IAAM,IACxCI,EAAUF,KAAKC,MAAMH,EAAe,KAAQ,GAC5CK,EAAUH,KAAKC,MAAMH,EAAe,KAAS,GAC7CM,EAAO,UAAMD,EAAQE,WAAWC,SAAS,EAAG,KAArC,YAA6CJ,EAAQG,WAAWC,SAAS,EAAG,KAA5E,YAAoFP,EAAOM,WAAWC,SAAS,EAAG,MACnI,OAAO,qBAAKC,UAAU,QAAf,SAAwBH,Q,GAnEfI,IAAMC,W,uBCuCXC,MAvCf,SAAuB5B,GAGnB,IAAM6B,EAAU,CACZC,MAAM,EACNC,UAAU,EACVC,cAAehC,EAAMgC,cACrBC,iBAAkB,CACdC,oBAAqB,mBAK7B,OAAIlC,EAAMgC,cAEF,sBAAKP,UAAU,qBAAf,UACI,cAAC,IAAD,CAAQI,QAASA,EACTM,OAAQ,GACRC,MAAO,GACPC,UAAWrC,EAAMqC,UACjBC,UAAU,EACVC,wBAAwB,IAChC,qBAAKd,UAAU,eAAf,SACI,qBAAKA,UAAU,YACXe,QAASxC,EAAMwC,QADnB,SAEQ,sBAAMf,UAAU,eAAhB,SAAgCzB,EAAMyC,eAOnD,qBAAKhB,UAAU,eACVe,QAASxC,EAAMwC,QADpB,SAES,sBAAMf,UAAU,eAAhB,SAAgCzB,EAAMyC,W,QCgB/CC,E,kDA3CX,WAAY1C,GAAQ,IAAD,8BACf,cAAMA,IAGDW,MAAQe,IAAMiB,YACnB,EAAKC,OAAS,EAAKA,OAAOtC,KAAZ,gBACd,EAAKuC,QAAU,EAAKA,QAAQvC,KAAb,gBACf,EAAKL,MAAQ,CACT6C,WAAW,GARA,E,qDAaXpC,KAAKT,MAAM6C,UACXpC,KAAKC,MAAMoC,QAAQxC,OAEnBG,KAAKC,MAAMoC,QAAQ7C,QAEvBQ,KAAKE,SAAS,CAACkC,WAAYpC,KAAKT,MAAM6C,c,gCAItCpC,KAAKC,MAAMoC,QAAQvC,U,+BAKnB,OAAO,sBAAKiB,UAAU,QAAf,UACH,cAAC,EAAD,CAAOuB,IAAKtC,KAAKC,QACjB,sBAAKc,UAAU,aAAf,UACI,cAAC,EAAD,CACIe,QAAS9B,KAAKkC,OACdH,MAAO/B,KAAKT,MAAM6C,UAAY,OAAS,KACvCT,WAAY3B,KAAKT,MAAM6C,UACvBd,cAAeiB,IACnB,cAAC,EAAD,CACIT,QAAS9B,KAAKmC,QACdJ,MAAO/B,KAAKT,MAAM6C,UAAY,UAAY,qB,GAvC5CpB,IAAMC,WCAxBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.520a45e5.chunk.js","sourcesContent":["import React from 'react';\n\n// an example of a class component that has a state \nclass Timer extends React.Component {\n    constructor(props) {\n        // always make a super() call when constructing the component\n        // props will then be assigned to this.props\n        super(props);\n        // the timer component needs to keep track of 3 values\n        // start: when it last started\n        // time: the current time\n        // duration: how long it has been running in total\n        this.state = {\n            start: new Date(),\n            time : 0,\n            duration : 0\n        };\n\n        // these three functions will be called as callbacks from outside the Timer Component itself. Because \"this\" in JS implicitely always refers to the 'context' object from where the function is called (rather than the objct where it is defined), the context of these functions needs to be set explicitly to always be the Timer component by invoking .bind() on them.\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    // One of the lifecycle-methods provided by React.Component to avoid data lecks:\n    // makes sure that the timer is cleared when the component gets destroyed\n    componentWillUnmount() \n    {\n        clearInterval(this.timer);\n    }\n\n    // starts a new counting session: the current Time starts being updated every 10ms \n    start() \n    {        \n        this.setState({ start: new Date() })\n        this.timer = setInterval(() => {\n            // this.setState MUST be used to make changes (otherwise, the component won't rerender)\n            this.setState({\n                time: new Date()\n            });\n        }, 10);\n    }\n\n    // pauses the timer:\n    // the timer stops updating and the session runtime since the last start() is added to the total runtime\n    stop() \n    {\n        clearInterval(this.timer);\n        this.setState({ \n            duration : this.state.duration + Date.now() - this.state.start.getTime(),\n            start: new Date() \n        });\n    }\n\n    // resets the total runtime to 0 and starts a new session\n    reset() {\n        this.setState({\n            start: new Date(),\n            duration: 0\n        });\n    }\n\n    // every call of setState() will cause the component to re-render, hence the updated time will be displayed\n    render() {\n        // formats the current timer value\n        const currentTimer = Date.now() - this.state.start.getTime() + this.state.duration;\n        const millis = Math.floor(currentTimer/ 10) % 100;\n        const seconds = Math.floor(currentTimer / 1000) % 60;\n        const minutes = Math.floor(currentTimer / 60000) % 60;\n        const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${millis.toString().padStart(2, '0')}`;\n    return <div className=\"timer\">{display}</div>\n    }\n}\n\nexport default Timer;","import Lottie from 'react-lottie';\nimport './App.css';\n\nfunction ControlButton(props) {\n\n    //animation options\n    const options = {\n        loop: true,\n        autoplay: false,\n        animationData: props.animationData,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    // render animation if animation data is present\n    if (props.animationData) {\n        return(\n            <div className=\"animated-container\">\n                <Lottie options={options}\n                        height={80}\n                        width={80}\n                        isStopped={props.isStopped}\n                        isPaused={false}\n                        isClickToPauseDisabled={true}/>\n                <div className=\"button-outer\">\n                    <div className=\"button go\" \n                        onClick={props.onClick}>\n                            <span className=\"button-label\">{props.label}</span>\n                    </div>\n                </div>\n            </div>\n            );\n    } else {\n     // otherwise just render button   \n        return <div className=\"button reset\" \n                    onClick={props.onClick}>\n                        <span className=\"button-label\">{props.label}</span>\n                </div>;\n    }\n}\n\nexport default ControlButton;","/* The top-level component of the component */\n\nimport React from 'react';\nimport Timer from './Timer'\nimport ControlButton from './ControlButton'\nimport spinningAnimationData from './assets/spinning.json';\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // React.createRef() creates a reference that can be set to a specific instance of a React component in order to get access to that component's functions and properties (in this case <Timer/>)\n        // To set the reference and to use it, it needs to be passed into a coponent Tag in the render function\n        this.timer = React.createRef(); \n        this.toggle = this.toggle.bind(this);\n        this.restart = this.restart.bind(this);\n        this.state = {\n            isRunning: false\n        }\n    }\n\n    toggle() {\n        if (this.state.isRunning) {\n            this.timer.current.stop();\n        } else {\n            this.timer.current.start();\n        }\n        this.setState({isRunning: !this.state.isRunning});\n    }\n\n    restart() {\n        this.timer.current.reset();\n    }\n\n    // \n    render() {\n        return <div className=\"frame\">\n            <Timer ref={this.timer} /> \n            <div className=\"button-row\">\n                <ControlButton \n                    onClick={this.toggle} \n                    label={this.state.isRunning ? \"Stop\" : \"Go\"} \n                    isStopped={!this.state.isRunning} \n                    animationData={spinningAnimationData}/>\n                <ControlButton \n                    onClick={this.restart} \n                    label={this.state.isRunning ? \"restart\" : \"delete\"}/>\n            </div>\n        </div>;\n    }\n}\n\nexport default App;\n","/* This is the boostrap for the React App */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Renders the entire App Component to the root node in index.html\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}